import torch
from torch import nn
from torch.utils.data import DataLoader
import torchvision
#准备数据集
from torch.utils.tensorboard import SummaryWriter
import time

train_data=torchvision.datasets.CIFAR10("./dataset",train=True,transform=torchvision.transforms.ToTensor(),
                                        download=True)
test_data=torchvision.datasets.CIFAR10("./dataset",train=False,transform=torchvision.transforms.ToTensor(),
                                       download=True)
#数据集长度
train_data_size=len(train_data)#训练集的长度为50000
test_data_size=len(test_data)#测试集的长度为10000
# print("训练集的长度为{}".format(train_data_size))
# print("测试集的长度为{}".format(test_data_size))

#利用dataloader加载数据集
train_dataloader=DataLoader(train_data,batch_size=64)
test_dataloader=DataLoader(test_data,batch_size=64)

#搭建神经网络
class Yuan(nn.Module):
    def __init__(self):
        super(Yuan, self).__init__()
        self.mode=nn.Sequential(
            nn.Conv2d(3,32,kernel_size=5,padding=2),
            nn.MaxPool2d(kernel_size=2),
            nn.Conv2d(32,32,kernel_size=5,padding=2),
            nn.MaxPool2d(kernel_size=2),
            nn.Conv2d(32,64,kernel_size=5,padding=2),
            nn.MaxPool2d(kernel_size=2),
            nn.Flatten(),
            nn.Linear(1024,64),
            nn.Linear(64,10)
        )
    def forward(self,x):
        return self.mode(x)
# if __name__ == '__main__':
    # #测试
    # yuan=Yuan()
    # input=torch.ones((64,3,32,32))
    # output=yuan(input)
    # print(output.shape)
#创建神经网络模型
yuan=Yuan()
if torch.cuda.is_available()==True:
    yuan=yuan.cuda()
#损失函数
loss_fn=nn.CrossEntropyLoss()
if torch.cuda.is_available()==True:
    loss_fn=loss_fn.cuda()
#优化器
learning_rate=0.01#学习速率
optimizer=torch.optim.SGD(yuan.parameters(),lr=learning_rate)

#设置训练网络的参数
#记录训练次数
total_train_step=0
#记录测试次数
total_test_step=0
#训练轮数
epoch=10

#添加tensorboard
writer=SummaryWriter("full_mode")

for i in range(epoch):
    #训练
    print("-------------第{}轮训练开始-----------------".format(i+1))
    start_time=time.time()
    yuan.train()#对特殊的层有作用
    for data in train_dataloader:
        imgs,targets=data
        if torch.cuda.is_available()==True:
            imgs=imgs.cuda()
            targets=targets.cuda()
        outputs = yuan(imgs)
        loss=loss_fn(outputs,targets)
        #优化器
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        total_train_step+=1
        if total_train_step%100==0:
            end_time=time.time()
            print("训练次数{}，Loss：{}".format(total_train_step,loss.item()))
            print("时间:{}".format(end_time-start_time))
            writer.add_scalar("train_loss",loss.item(),total_train_step)
    #测试步骤
    yuan.eval()#对特殊的层有作用
    #整体loss
    total_test_loss=0
    #整体正确率
    total_accuracy=0
    with torch.no_grad():
        for data in test_dataloader:
            imgs,targets=data
            if torch.cuda.is_available()==True:
                imgs=imgs.cuda()
                targets=targets.cuda()
            outputs=yuan(imgs)
            loss=loss_fn(outputs,targets)
            total_test_loss+=loss.item()
            outputs_targets=outputs.argmax(1)
            accuracy=(outputs_targets==targets).sum()
            total_accuracy+=accuracy
    print("整体测试集上的loss:{}".format(total_test_loss))
    print("整体测试集上的正确率:{}".format(total_accuracy))
    writer.add_scalar("test_loss",total_test_loss,total_test_step)
    writer.add_scalar("test_accuracy",total_accuracy,total_test_step)
    total_test_step+=1

    torch.save(yuan,"yuan_{}.pth".format(i))
    print("模型已保存")

writer.close()
